{"version":3,"sources":["utils/auth.js","utils/mutations.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","useQuery","loading","data","deleteBook","userData","me","username","handleDeleteBook","variables","savedBooks","SignupForm","createUser","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","login","creatUser","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","log","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b58e0b41.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import gql from 'graphql-tag';\r\n\r\nexport const LOGIN_USER = gql`\r\nmutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n        token\r\n        user {\r\n            _id\r\n            username\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\nmutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n        token\r\n        user {\r\n            _id\r\n            username           \r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\nmutation saveBook($input: SavedBook!) {\r\n    saveBook(input: $input) {\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n            title\r\n            description\r\n            authors\r\n            bookId\r\n            image\r\n            link\r\n        }\r\n    }\r\n}`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n    mutation removeBook($bookId: String!) {\r\n        removeBook(bookId: $bookId) {\r\n            username\r\n            email\r\n            bookCount\r\n            savedBooks {\r\n                title\r\n                description\r\n                authors\r\n                bookId\r\n                image\r\n                link\r\n            }\r\n\r\n        }\r\n    }\r\n    `;","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { useMutation } from '@apollo/client';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook(bookToSave, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import gql from 'graphql-tag';\r\n\r\nexport const GET_ME = gql`\r\n  {\r\n    me {\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n                title\r\n                description\r\n                authors\r\n                bookId\r\n                image\r\n                link                \r\n        }\r\n    }\r\n}\r\n`;","import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n// import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [deleteBook] = useMutation(REMOVE_BOOK);\n  const userData = data?.me || {};\n\n  // use this to determine if `useEffect()` hook needs to run again\n  // const userDataLength = Object.keys(userData).length;\n\n  // useEffect(() => {\n  //   const getUserData = async () => {\n  //     try {\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  //       if (!token) {\n  //         return false;\n  //       }\n\n  //       const response = await getMe(token);\n\n  //       if (!response.ok) {\n  //         throw new Error('something went wrong!');\n  //       }\n\n  //       const user = await response.json();\n  //       setUserData(user);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //   };\n\n  //   getUserData();\n  // }, [userDataLength]);\n\n  if (!userData?.username) {\n    return (\n      <h4>Please sign up and/or log in to view this page.</h4>\n    );\n  }\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await deleteBook({\n        variables: { bookId }\n      });\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { createUser } from '../utils/API';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // adding createUser function:\n  const [createUser] = useMutation(ADD_USER);\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    // try {\n    //   const response = await createUser(userFormData);\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    try {\n      const {data} = await createUser({\n        variables: userFormData\n      });\n      Auth.login(data.creatUser.token);\n    } catch(err) {\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    // try {\n    //   const response = await loginUser(userFormData);\n\n    //   if (!response.ok) {\n    //     throw new Error('something went wrong!');\n    //   }\n\n    //   const { token, user } = await response.json();\n    //   console.log(user);\n    //   Auth.login(token);\n    // } catch (err) {\n    //   console.error(err);\n    //   setShowAlert(true);\n    // }\n\n    try {\n      const { data } = await loginUser({\n        variables: userFormData\n      });\n      const { token } = data.login;\n      Auth.login(token);\n    } catch(err) {\n      console.log(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\n// adding in Apollo imports:\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n// import { ApolloClient } from 'apollo-boost';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\n const httpLink = createHttpLink({\n   uri: '/graphql'\n });\n\n// const client = new ApolloClient({\n//   request: (operation) => {\n//     const token = localstorage.getItem('id_token');\n\n//     operation.setContext({\n//       headers: {\n//         authorization: token ? `Bearer ${token}` : '',\n//       },\n//     });\n//   },\n//   uri: '/graphql',\n// });\n\n const authLink = setContext((_, { headers }) => {\n   const token = localStorage.getItem('id_token');\n   return {\n     headers: {\n     ...headers,\n     authorization: token ? `Beater ${token}` : '',\n     }\n   }\n });\n\n const client = new ApolloClient({\n   link: authLink.concat(httpLink),\n   cache: new InMemoryCache(),\n });\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}